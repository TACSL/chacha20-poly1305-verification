module chacha20 where
type ChaChaState = [16][32]
type ChaChaKey = [8][32]
type Counter = [32]
type Nonce = [3][32]
type Constants = [4][32]
type Block = [64][8]        //序列化
Constants = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574]

testChaChaKey = [0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c, 0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c]
testCounter = 0x00000001
testNonce = [0x90000000, 0x4a000000, 0x00000000]

testState = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574, 0x03020100,
  0x07060504, 0x0b0a0908, 0x0f0e0d0c, 0x13121110, 0x17161514,
  0x1b1a1918, 0x1f1e1d1c, 0x00000001, 0x90000000, 0x4a000000,
  0x00000000]

testStates = [[0x140cbdcf, 0x67b5df83, 0x581e5aef, 0xc90c2841, 0x83ed57cc,
  0xb1d66c8b, 0xc2c9e057, 0x466c1a8b, 0xde77a932, 0xe5d849b6,
  0xa9fa31ba, 0xfacb0dac, 0xcc40432b, 0x54a44bbe, 0x04bc2392,
  0x64e8c2f6],
 [0x9870dd77, 0xd73a31cc, 0xd653ee68, 0x2019b352, 0xda69494a,
  0x0d7d7042, 0xc80e9f56, 0x8a5e0064, 0xb014d33e, 0x2f1cf537,
  0x5b0e5875, 0xdd3172ee, 0xbb60bb80, 0x12eb165f, 0xab4ca0bd,
  0xb6e570a0],
 [0x0d438a58, 0x390a2f98, 0x8577075e, 0x2ae47abc, 0x8cbf7e40,
  0xf6596a0b, 0xf3cde43a, 0x9eec4dab, 0xdabb0393, 0x50e6f4d1,
  0xbdc6dbc0, 0x01f2daa9, 0x3ebc1641, 0xc0ae4f34, 0xe70f274a,
  0x11a104e0],
 [0x02b74e9a, 0x103d219a, 0x57b6fa33, 0x248dbe5f, 0xe592321d,
  0x751c1cd2, 0x50958ee6, 0x35523fd3, 0x851d442e, 0x32adc40d,
  0x80d51af2, 0xf2de165f, 0x947a332d, 0x16089641, 0x02274d48,
  0x06026f4a],
 [0x03475d1f, 0x5b4c8ad2, 0xea0e0aa8, 0xfc93eef8, 0x5891c0f7,
  0x0d2e44db, 0x3f9098d8, 0x39b3181f, 0x3ff761f1, 0x09e01f9c,
  0xc212a079, 0xd9954651, 0xa53b911d, 0x4225484f, 0x549d6226,
  0x90497458]]
  
//ChaCha四分之一回合
//[0x11111111,0x01020304,0x9b8d6f43,0x01234567]  满足
ChaChaQuarterround : [4][32] -> [4][32]
ChaChaQuarterround [a, b, c, d] = [a'', b'', c'', d''] where
    a' = a + b
    d' = (d ^ a') <<< 16
    c' = c + d'
    b' = (b ^ c') <<< 12
    a'' = a' + b'
    d'' = (d' ^ a'') <<< 8
    c'' = c' + d''
    b'' = (b' ^ c'') <<< 7

// ChaCha 块函数通过运行 多个四分之一回合。
// ChaCha20 的输入包括：    
// 一个 256 位密钥，被视为 8 个 32 位小端整数的串联。
// 一个 96 位随机数，被视为 3 个 32 位小端整数的串联。
// 一个 32 位块计数参数，被视为 32 位小端整数。
//输出是与输入具有相同的长度
//一轮
ChaCharound : ChaChaState -> ChaChaState
ChaCharound [ x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 ]
      = [ z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, z11, z12, z13, z14, z15 ]
  where
    // Column round
    [ y0, y4, y8,  y12 ] = ChaChaQuarterround [ x0, x4, x8,  x12 ]
    [ y1, y5, y9,  y13 ] = ChaChaQuarterround [ x1, x5, x9,  x13 ]
    [ y2, y6, y10, y14 ] = ChaChaQuarterround [ x2, x6, x10, x14 ]
    [ y3, y7, y11, y15 ] = ChaChaQuarterround [ x3, x7, x11, x15 ]

    // Diagonal round
    [ z0, z5, z10, z15 ] = ChaChaQuarterround [ y0, y5, y10, y15 ]
    [ z1, z6, z11, z12 ] = ChaChaQuarterround [ y1, y6, y11, y12 ]
    [ z2, z7, z8,  z13 ] = ChaChaQuarterround [ y2, y7, y8,  y13 ]
    [ z3, z4, z9,  z14 ] = ChaChaQuarterround [ y3, y4, y9,  y14 ]

ChaChaAdd : ChaChaState -> [32] -> ChaChaState
ChaChaAdd [ x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 ] i
      = [ x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12+i, x13, x14, x15 ]

//ChaCha20 testChaChaKey testCounter testNonce
ChaCha20 : ChaChaKey -> Counter -> Nonce -> ChaChaState
ChaCha20 chachakey counter nonce = state2
     where state     = Constants # chachakey # [counter] # nonce
           workstate = (iterate ChaCharound state) @ 10
           state2    = workstate + state

ChaCha20' : ChaChaState -> ChaChaState
ChaCha20' state = state2
     where workstate = (iterate ChaCharound state) @ 10
           state2    = workstate + state


//ChaCha20块功能用于将密钥扩展为密钥流
//序列化
Serialize : ChaChaState -> Block
Serialize state = block
     where block = groupBy`{8} (join state)

Serializes : {n} (fin n) => [n]ChaChaState -> [64*n][8]
Serializes states = blocks
     where blocks = groupBy`{8}(join (join states))


//迭代密钥流
Key_stream : ChaChaState -> [inf][8]
Key_stream state = groupBy`{8} (join (join [ ChaCha20' (ChaChaAdd state i)| i <- [0, 1 ... ] ]))


ChaCha20_encrypt : {n} (fin n, 64 <= width n) => ChaChaKey -> Counter -> Nonce -> [n][8] -> [n][8]
ChaCha20_encrypt key counter nonce plaintext = ciphertext
   where state      = ChaCha20 testChaChaKey testCounter testNonce   //input 
         key_stream = take`{n}(Key_stream state) //生成密钥         //while == ChaCha20' (ChaChaAdd state i)
         ciphertext = key_stream ^ plaintext

         
         
  


                                                    






