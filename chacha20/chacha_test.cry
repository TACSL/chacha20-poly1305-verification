import chacha_openssl
import chacha_rfc

dout = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
dinp1 = [0x35, 0x59, 0x3a, 0x2d, 0xe1, 0x88, 0x54, 0xb8, 0xe7, 0xc3, 0x79,
   0x2f, 0x45, 0xcb, 0xee, 0x87, 0x3d, 0x74, 0xd8, 0xad, 0x1e, 0x33,
   0x74, 0xe5, 0x07, 0x20, 0x36, 0x2f, 0x02, 0xb4, 0xc1, 0xb9, 0xbd,
   0x15, 0xb5, 0xa7, 0x40, 0x15, 0x4a, 0xbf, 0x21, 0xcf, 0x28, 0x09,
   0xfe, 0x86, 0xed, 0xc9, 0x0e, 0xdf, 0xbd, 0xaf, 0x16, 0x2b, 0xda,
   0x1d, 0x35, 0xbb, 0x1c, 0x58, 0x7f, 0x4d, 0x48, 0xd3]
dinp2 = [0xc5, 0xa3, 0x5e, 0x39, 0xc1, 0x5e, 0x83, 0x2c, 0x40, 0x31, 0xf5,
   0xb0, 0x70, 0xad, 0xaa, 0xc8, 0xb2, 0xa8, 0xf2, 0xf2, 0x99, 0x75,
   0x58, 0xbf, 0x5d, 0x50, 0xc0, 0x9a, 0x31, 0xc9, 0x89, 0xb7, 0x90,
   0x42, 0x10, 0x3a, 0xfa, 0xbb, 0x75, 0xba, 0x78, 0xbc, 0x86, 0x87,
   0x80, 0xce, 0xf4, 0xe0, 0xb6, 0xcf, 0x04, 0x11, 0x1d, 0xdd, 0x16,
   0x41, 0xd5, 0xa9, 0x3b, 0x00, 0x9b, 0x99, 0xd3, 0xae]
dkey1 = [0xc3ea7096, 0xc58e212c, 0xd6034f72, 0x3cecbcb1, 0x54099dc8,
   0x467d686a, 0x8c718592, 0x21454ef8]
dkey2 = [0x23ff8484, 0xfa659312, 0x58b3db9e, 0x04d23dbf, 0x6906b09e,
   0x591c7751, 0x4956ad81, 0x2f044c91]
dcounter1 = [0xc73508a3, 0xff229495, 0xf6ee1aa1, 0xee75b3bf]
dcounter2 = [0x6b23b1fc, 0x2be5d9d2, 0x5e7f8254, 0xc787578c]

doutput = [0x02, 0xf6, 0x84, 0xf4, 0xd0, 0x85, 0xee, 0x63, 0x8c, 0x9a, 0x46,
 0x69, 0x73, 0x86, 0xb1, 0x97, 0xdf, 0x8d, 0x00, 0x10, 0x86, 0xa4,
 0x83, 0x20, 0x89, 0xf5, 0xb5, 0x1f, 0x04, 0x9a, 0x3f, 0xcc, 0x88,
 0xd7, 0xff, 0x52, 0xfa, 0x62, 0x2b, 0x5a, 0x8e, 0x4d, 0x59, 0xe2,
 0x9a, 0x7f, 0x4c, 0x3b, 0x90, 0x08, 0x9a, 0x15, 0x71, 0xa7, 0x5e,
 0x48, 0xcb, 0xe9, 0xa3, 0xf7, 0xb1, 0x1e, 0x9c, 0xc0]


tout = [0x4c,0x61,0x64,0x69,0x65,0x73,0x20,0x61,0x6e,0x64,0x20,0x47,0x65,0x6e,0x74,0x6c,0x65,0x6d,0x65,0x6e,0x20,0x6f,0x66,0x20,0x74,0x68,0x65,0x20,0x63,0x6c,0x61,0x73,0x73,0x20,0x6f,0x66,0x20,0x27,0x39,0x39,0x3a,0x20,0x49,0x66,0x20,0x49,0x20,0x63,0x6f,0x75,0x6c,0x64,0x20,0x6f,0x66,0x66,0x65,0x72,0x20,0x79,0x6f,0x75,0x20,0x6f,0x6e,0x6c,0x79,0x20,0x6f,0x6e,0x65,0x20,0x74,0x69,0x70,0x20,0x66,0x6f,0x72,0x20,0x74,0x68,0x65,0x20,0x66,0x75,0x74,0x75,0x72,0x65,0x2c,0x20,0x73,0x75,0x6e,0x73,0x63,0x72,0x65,0x65,0x6e,0x20,0x77,0x6f,0x75,0x6c,0x64,0x20,0x62,0x65,0x20,0x69,0x74,0x2e]
tinp = [0x4c,0x61,0x64,0x69,0x65,0x73,0x20,0x61,0x6e,0x64,0x20,0x47,0x65,0x6e,0x74,0x6c,0x65,0x6d,0x65,0x6e,0x20,0x6f,0x66,0x20,0x74,0x68,0x65,0x20,0x63,0x6c,0x61,0x73,0x73,0x20,0x6f,0x66,0x20,0x27,0x39,0x39,0x3a,0x20,0x49,0x66,0x20,0x49,0x20,0x63,0x6f,0x75,0x6c,0x64,0x20,0x6f,0x66,0x66,0x65,0x72,0x20,0x79,0x6f,0x75,0x20,0x6f,0x6e,0x6c,0x79,0x20,0x6f,0x6e,0x65,0x20,0x74,0x69,0x70,0x20,0x66,0x6f,0x72,0x20,0x74,0x68,0x65,0x20,0x66,0x75,0x74,0x75,0x72,0x65,0x2c,0x20,0x73,0x75,0x6e,0x73,0x63,0x72,0x65,0x65,0x6e,0x20,0x77,0x6f,0x75,0x6c,0x64,0x20,0x62,0x65,0x20,0x69,0x74,0x2e]
tinp' = [0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80,
    0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69, 0x81,
    0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2,
    0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f, 0xae, 0x0b,
    0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab,
    0x8f, 0x59, 0x3d, 0xab, 0xcd, 0x62, 0xb3, 0x57,
    0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab,
    0x8f, 0x53, 0x0c, 0x35, 0x9f, 0x08, 0x61, 0xd8,
    0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61,
    0x56, 0xa3, 0x8e, 0x08, 0x8a, 0x22, 0xb6, 0x5e,
    0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06,
    0x81, 0x8c, 0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36,
    0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6,
    0xb4, 0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42,
    0x87, 0x4d]

// tkey = [0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c, 0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c]
// tcounter = [0x00000001, 0x00000000, 0x4a000000, 0x00000000]

// ti = 0x00000001
// tkey = 0x03020100070605040b0a09080f0e0d0c13121110171615141b1a19181f1e1d1c
// tcounter = 0x000000004a00000000000000

ti = 0x00000001
tkey = 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f
tkey = [0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f 0x10111213, 0x14151617, 0x18191a1b, 0x1c1d1e1f]
tcounter = 0x000000000000004a00000000

chakey : [256] -> [256]
chakey key = out'
    where key32 = groupBy`{32} key
          out = [ reverse (split`{4} keyt) | keyt <- key32 ]
          out' = join (join out)

chacounter : [96] -> [96]
chacounter key = out'
    where key32 = groupBy`{32} key
          out = [ reverse (split`{4} keyt) | keyt <- key32 ]
          out' = join (join out)



testBuf_u = [2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648]
testBuf_c = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
testBuf = {u = testBuf_u, c = testBuf_c}


testInput = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]


testInput2 = [2078609256,502481067,997930854,95371576,2196139849,2109880764,1791503143,1597382513,2862857106,1036534222,315038205,
1613352389,4248443903,2724378768,1987494519,4029436897]
testBuf_u2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
testBuf2 = { u = testBuf_u2, c = testBuf_c }

testInput3 = [3685801710,4258528401,90240957,2681183829,1482479902,1775052360,846331250,
                373921445,2514680162,1099753187,814503668,4259146612,1840529569,1908101091,4277036680,1376887051]
testBuf_u3 = [0, 0, 33554432, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 8, 0, 0]
testBuf3 = { u = testBuf_u3, c = testBuf_c }




//test vectors

//A.1 The ChaCha20 Block Functions
//test vector1
key1 = [00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00]
nonce1 = [00 00 00 00 00 00 00 00 00 00 00 00]
counter1 = 0

//test vector2
key1 = [00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00]
nonce1 = [00 00 00 00 00 00 00 00 00 00 00 00]
counter1 = 1

//test vector3
key1 = [00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01]
nonce1 = [00 00 00 00 00 00 00 00 00 00 00 00]
counter1 = 1

//test vector4
key1 = [00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00]
nonce1 = [00 00 00 00 00 00 00 00 00 00 00 00]
counter1 = 2

//test vector5
key1 = [00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00]
nonce1 = [00 00 00 00 00 00 00 00 00 00 00 02]
counter1 = 0

//A.2.  ChaCha20 Encryption

//test vector1
key1 = [00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00]
nonce1 = [00 00 00 00 00 00 00 00 00 00 00 00]
counter1 = 0

//test vector2
key1 = [00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01]
nonce1 = [00 00 00 00 00 00 00 00 00 00 00 02]
counter1 = 1

//test vector3
key1 = [1c 92 40 a5 eb 55 d3 8a f3 33 88 86 04 f6 b5 f0 47 39 17 c1 40 2b 80 09 9d ca 5c bc 20 70 75 c0]
nonce1 = [00 00 00 00 00 00 00 00 00 00 00 02]
counter1 = 42

//A.3.  Poly1305 Message Authentication Code
//test Vector #1: